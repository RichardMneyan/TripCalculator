#pragma checksum "C:\Users\VaruchiPC\source\repos\TripCalculator\TripCalculator\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5af2085aaf9d9f156ce14b8c65622dc211965bd1"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Index.cshtml", typeof(AspNetCore.Views_Home_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\VaruchiPC\source\repos\TripCalculator\TripCalculator\Views\_ViewImports.cshtml"
using TripCalculator;

#line default
#line hidden
#line 2 "C:\Users\VaruchiPC\source\repos\TripCalculator\TripCalculator\Views\_ViewImports.cshtml"
using TripCalculator.Models;

#line default
#line hidden
#line 1 "C:\Users\VaruchiPC\source\repos\TripCalculator\TripCalculator\Views\Home\Index.cshtml"
using System.Globalization;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5af2085aaf9d9f156ce14b8c65622dc211965bd1", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"89c65f5e94827f4b08a1efdb156f2f271602116e", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<TripCalculator.Models.TripCalculatorViewModel.vmTripCalculator>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(101, 906, true);
            WriteLiteral(@"
<script src=""https://ajax.googleapis.com/ajax/libs/angularjs/1.7.8/angular.min.js""></script>
<style>
    .TblFix { table-layout: fixed; width: 100%; white-space: nowrap; }
    .TblFix td { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
    .TblFix th { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }

	.cFullName { width: 70%; font-family: Arial; color:darkblue; font-weight:bold; cursor:pointer; }
	.cAmountDue { width: 20%; font-family: Arial; text-align:right; }
	.cBalance { width: 30%; font-family: Arial; text-align:right; }

	.cName { width: 35%; font-family: Arial; }
	.cDescription { width: 35%; font-family: Arial; }
	.cAmount { width: 20%; font-family: Arial; text-align:right; }
	.cAction {width: 10%; font-family: Arial; text-align:right; }

	.cGreen { color:green; font-size:larger; }
	.cRed { color:red; font-size:larger; }
</style>
");
            EndContext();
#line 22 "C:\Users\VaruchiPC\source\repos\TripCalculator\TripCalculator\Views\Home\Index.cshtml"
  
	ViewData["Title"] = "Home Page";

#line default
#line hidden
            BeginContext(1049, 306, true);
            WriteLiteral(@"
<div ng-app=""myApp"" ng-controller=""myCtrl"">
	<h1 class=""display-4"">Trip Calculator
	<span style=""font-size:large;text-align:center;"">
		(click <span ng-click=""ClearForm()"" style=""cursor:pointer;color:darkblue;font-size:xx-large;font-style:italic;"">here</span> to clear the form)
	</span>
	</h1>

	");
            EndContext();
            BeginContext(1356, 69, false);
#line 33 "C:\Users\VaruchiPC\source\repos\TripCalculator\TripCalculator\Views\Home\Index.cshtml"
Write(await Html.PartialAsync("~/Views/Home/_TripCalculator.cshtml", Model));

#line default
#line hidden
            EndContext();
            BeginContext(1425, 4743, true);
            WriteLiteral(@"
</div>

<script>
	var app = angular.module(""myApp"", []);
	app.controller(""myCtrl"", function ($scope) {
		$scope.selectedTraveler;
		$scope.travelerTransactions;
		$scope.TotalExpense = 0;
		
		$scope.travelers = [
			{ fullname: ""Richard Mneyan"", balance: 0 },
			{ fullname: ""Desiree Morrow"", balance: 0 },
			{ fullname: ""Gisselle Velasquez"", balance: 0 },
			{ fullname: ""Kailyn Escobar"", balance: 0 }
		];
		$scope.TravelerCount = $scope.travelers.length;

		var sid = uuidv4();
		$scope.transactions = [
			{ Id: uuidv4(), fullname: ""Richard Mneyan"", description: ""Air Travel"", amount: 12.45 },
			{ Id: uuidv4(), fullname: ""Gisselle Velasquez"", description: ""Food"", amount: 35.44 },
			{ Id: uuidv4(), fullname: ""Gisselle Velasquez"", description: ""Air Travel"", amount: 25.54 },
			{ Id: uuidv4(), fullname: ""Richard Mneyan"", description: ""Air Travel"", amount: 11.63 },
			{ Id: uuidv4(), fullname: ""Desiree Morrow"", description: ""Air Travel"", amount: 25.44 },
			{ Id: uuidv4(), fullname: ""Gi");
            WriteLiteral(@"sselle Velasquez"", description: ""Food"", amount: 35.44 },
		];		

		$scope.selTransactions = $scope.transactions; // display all transactions on load
		refreshTravelersAndBalances();

		$scope.getDetails = function (vTraveler) {
			try {
				if (vTraveler === ""All"") {
					$scope.selectedTraveler = ""All"";
					$scope.selTransactions = $scope.transactions;
				} else {
					$scope.selectedTraveler = vTraveler.fullname;
					$scope.selTransactions = $scope.transactions.filter(t => t.fullname == vTraveler.fullname);
				}
			} catch (err) { alert(err.message); }
		};

		$scope.AddTraveler = function () {
			try {
				if ($scope.newTravelerName != null && $scope.newTravelerName.length > 0) {
					$scope.travelers.push({
						fullname: $scope.newTravelerName,
						balance: 0,
					});
					$scope.TravelerCount = $scope.travelers.length;
				}
			} catch (err) { alert(err.message); }
		};

		$scope.AddTransaction = function () {
			try {
				if ($scope.transAmount != null && $scope.");
            WriteLiteral(@"transAmount > 0 && $scope.selTraveler != null && $scope.selTraveler.length > 0) {
					$scope.transactions.push({
						Id: uuidv4(),
						fullname: $scope.selTraveler,
						description: $scope.transType,
						amount: $scope.transAmount,
					});
					if ($scope.selectedTraveler != null) { // Refresh transaction datatable
						$scope.selTransactions = $scope.transactions.filter(t => t.fullname == $scope.selectedTraveler);
					}
					refreshTravelersAndBalances();
				}
			} catch (err) { alert(err.message); }
		};

		$scope.RemoveTransaction = function (trans) {
			try {
				$scope.transactions = $scope.transactions.filter(function (obj) {
					return obj.Id !== trans.Id;
				});
				$scope.selTransactions = $scope.transactions;
				if ($scope.selectedTraveler != null) { // Refresh transaction datatable
					$scope.selTransactions = $scope.transactions.filter(t => t.fullname == $scope.selectedTraveler);
				}
				refreshTravelersAndBalances();
			} catch (err) { alert(err.message");
            WriteLiteral(@"); }
		};

		$scope.ClearForm = function () {
			try {
				$scope.travelers = [];
				$scope.transactions = []; $scope.selTransactions = $scope.transactions;
				$scope.selectedTraveler = null;
				updateTotalExpense();
				document.getElementById(""hdrSampleId"").style.display = ""none""
			} catch (err) { alert(err.message); }
		};

		function refreshTravelersAndBalances() {
			angular.forEach($scope.travelers, function (value, index) { // Refresh travelers and their balances
				$scope.travelers[index].balance = getTotalBalance($scope.travelers[index].fullname);
				updateTotalExpense();
			});
		}

		function getTotalBalance(tName) {
			var vTotal = 0.00;
			try {
				$scope.travelerTransactions = $scope.transactions.filter(t => t.fullname == tName);
				angular.forEach($scope.travelerTransactions, function (value, index) {
					var dAmount = +$scope.travelerTransactions[index].amount;
					vTotal += dAmount;
				});				
			} catch (err) { alert(err.message); }
			return vTotal; ");
            WriteLiteral(@"
		}

		function updateTotalExpense() {
			var vTotal = 0.00;
			try {
				if ($scope.transactions.length > 0) {
					angular.forEach($scope.transactions, function (value, index) {
						var dAmount = +$scope.transactions[index].amount;
						vTotal += dAmount;
					});
					$scope.TotalExpense = vTotal;
				} else { $scope.TotalExpense = 0; }
			} catch (err) { alert(err.message); }
		}

		function uuidv4() {
			return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
			var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
			return v.toString(16);
		});

		}		
	});
</script>


");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TripCalculator.Models.TripCalculatorViewModel.vmTripCalculator> Html { get; private set; }
    }
}
#pragma warning restore 1591
